
** 웹프로그래밍을 할 때 준비사항 
=> Front End만 하는 경우에는 Editor(Bracket, Atom, Aptana Studio 등) 하나와 Browser하나만 
있으면 됩니다. 

=>Front End 와 Back End를 같이 하고자 하는 경우에는 IDE(통합 개발 환경- Eclipse), Back End에
접근할 수 있도록 해주는 연결 서버(Web Server 또는 Socket Server - Apache), 서버용 언어로 만들어진 내용을
Front End언어로(HTML)로 변경해주는 WAS(Web Application Server, Web Container -
Tomcat )가 필요합니다.
만들어진 내용을 확인하려면 Browser가 필요 
Browser는 무겁지만 크롬을 많이 사용 - 모바일까지 감안해서 
사파리도 크롬과 동일한 엔진인데 HTML5지원이 조금 빈약해서 크롬을 많이 사용 

=> HTML5만 공부하는 경우에는 Opera를 많이 사용합니다. 

=> open source로 웹서버와 자바(php 도 가능)WAS의 기능도 가진 apache tomcat을 학습할 때는 
많이 사용 : 실무환경에서는 티맥스의 제우스 또는 IBM의 WAS를 많이 이용합니다. 
=>tomcat.apache.org에서 다운로드 

**Eclipse에서 웹프로그래밍 
1.Dynamic Web Project생성 
=>src는 컴파일을 수행해야 한느 파일을 배치하는 디렉토리 -java파일 
=>WebContent디렉토리는 컴파일을 하지 않아도 되는 파일을 배치하는 디렉토리 -html, css, js
,jspemd 
=>src디렉토리의 내용을 수정했을 때는 서버를 다시 실행하지만 WebContent디렉토리의 내용을 
수정한 경우에는 새로 고침만 적용하면 됩니다. 

2.실행 
=>프로젝트를 선택하거나 실행하고자 하는 html파일이나 jsp파일을 선택 
프로젝트를 선택하면 index.html이나 index.jsp또는 default.html등이 실행 됩니다.

=>마우스 오른쪽을 클릭하고 [Run as] - [Run on Server] 
=>처음 한번은 실행할 WAS를 선택합니다. 
=> WAS를 선택하고 WAS의 명령이 있는 디렉토리를 선택 
=>실행할 프로젝트를 선택하고 finish 

3.실행하는 브라우저 변경 
=>Eclipse에서 [Eclipse] - [Preferences -환경설정] 
윈도우즈이면 [Windows]-[Preferences -환경설정] 

=>[General]탭의 WebBrowser 
 


** Multimedia 
=> object태그를 이용해서 비디오, 동영상, 플래시 파일 등을 재생할 수 있습니다. 
=> HTML5에서는 외부 플러그 인을 이용해서 파일을 재생하는 것을 비추천합니다,.
플래스 파일 등은 사용빈도가 낮아 졌습니다. 
=> HTML5에 video,audio태그가 추가되서 object를 이용해서 multimedia를 재생할 필요가
거의 없어졌습니다. 

** form 
=> 사용자의 입력을 하나로 묶어서 전송하기 위한 태그 
=> 클라이언트가 서버에게 데이터를 전송하는 방법은 URL에 파라미터를 붙여서 전송하는 방법이 있고
form을 이용해서 전송할 수 있고 ajax나 web socket(HTML5 API)을 이용해서 전송이 가능  
1.URL에 파라미터를 붙여서 전송하는 방법(get방식)
프로토콜://서버경로:포트번호/요청경로?파라미터이름=값&파라미터이름=값...
=>프로토콜은 생략이 불가능한데 웹 브라우저에서는 http나 https를 자동으로 붙여줍니다. 
//시작하는 경우는 상황에 따라 http나 https를 붙여 달라는 요청

=> 서버경로는 IP로 되어있는 경우도 있고 도메인으로 된 경우도 있는데 생략이 불가능 

=>포트번호는 생략이 가능한데 생략이 가능한 경우는 프로토콜의 기본포트가 있는데 서버를  만들때 
프로토콜에 해당하는 포트번호를 기본포트 번호로 설정한경우입니다. 
http(보안이 안됨-스마트 폰에서 접속할 때 설정을 추가해야 합니다.):80
https(보안이 되어 있음- 인증서를 발급): 443 

=>요청경로는 파일의 위치가 아니고 클라이언트가 요청하는 구문인데 생략이 된 경우는 설정파일에서 
생략된 경우에는 어떤 요청이라고 설정을 했기 때문입니다. 
기본 설정은 index.html, index.jsp, default.html 등입니다. 

=> ?뒤에 파라미터를 작성하는데 생략이 가능 
파라미터이름=값을 쓰는 형식으로 서버에게 전달 

실습)프로젝트를 생성하고  html파일에 작성 
<!DOCTYPE html>
<html>
<!--  문서의 설정 정보  -->
<head>
<!-- 문서의 인코딩 설정으로 생략하면 한글이 깨질 수 있음  -->
<meta charset="UTF-8">
<!--  브라우저의 탭에 보여지는 텍스트이면서 
북마크에 추가할 때 기본 텍스트입니다. -->
<title>1029HTML</title>
</head>
<!--  body: 브라우저에 보여지는 내용  -->
<body>
      <h1>html &amp; CSS</h1>
      <a href="login.jsp?id=jeremy94&pw=1234">로그인</a><br/>
      
      
</body>
</html>

2.login.jsp파일을 만들고 작성 
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>파라미터 읽기</title>
</head>
<body>
      <%
               String id = request.getParameter("id");
               String pw = request.getParameter("pw");
               
               out.println(id + "<br/>");
               out.println(pw + "<br/>");
      %>
</body>
</html>

=>웹 프로그래밍에서 parameter는 클라이언트가 서버에게 넘겨주는 데이터이고 attribute는 서버가
처리하고 저장하는 데이터로 클라이언트에서 사용할 수 있습니다. 

3.form.html파일을 생성하고 작성 
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>폼의 역활 </title>
</head>
<body>
      <form action="login.jsp"  method="post" >
          아이디:<input type="text"  name="id" /><br/>
          비밀번호:<input type="password"  name="pw" />
          <br/>
          <input type="submit"  value="로그인" />
      </form>
</body>
</html>

**form
=> 클라이언트의 파라미터를 하나로 묶어서 보내거나 사용자의 입력을 받아서 전송하고자 할 때 
사용하는 태그 

1.form태그 
=>action속성: 데이터를 전달할 서버의 URL지정하는 속성으로 생략하면 현재 페이지에 오게된 
URL이 자동설정 됩니다. 

=>method속성: 데이터를 전송하기 위한 방법으로 get과 post가 있고 추가로 put과 delete가 있습니다.
get은 url에 파라미터를 붙여서 전송하고 post는 header에 숨겨서 전송 
get은 자동 재전송이 가능하다는 장점은 있지만 글자수에 제한이 있고 보안이 안됩니다, 
post는 글자수 제한이 없고 보안이 우수하지만 자동 재전송은 안됩니다. 
put과 delete는 post와 동일한데 post는 데이터 삽입에 이용하고 put은 수정 그리고 delete는 삭제에 
이용하고자 해서 만든 것입니다. 

=>enctype 속성: 데이터를 분할해서 전송할 것인지 아니면 한번에 전송할 것인지 설정하는 속성으로 
데이터에 file이 있을 때만 multipart/form-data로 설정해야 합니다. 

=>form을 자바스크립트에서 사용하기 위해서 id속성을 설정합니다. 

2.fieldset 과 legend 
=>fileldset은 외곽선을 만들어 주기 위한 태그 
=>legend는 fieldset안에 사용되서 외곽선에 텍스트를 출력하기 위한 태그 

3.label
=>문자열을 출력하기 위한 태그  
=>for속성: 다른 입력도구의 id를 설정해서 label을 선택해도 설정된 id의 입력도구에 입력 
할 수 있도록 해주는데 모바일 웹에서 많이 사용 

4. input
=>입력도구 
=>type속성: text, password, hidden, file, submit, button, reset, image, checkbox, radio
text는 기본설정으로 문자열을 입력받는 도구 
password는 비밀번호 입력받는 도구 
hidden은 눈에 보이지 않는 상태에서 서버에게 데이터를 전달할 때 사용 
file은 파일을 선택할 때 사용 
submit은 form의 데이터를 전송하기 위한 버튼 
button은 그냥 버튼 
reset은 form의 데이터를 클리어 시키기 위한 버튼 
image는 image를 설정할 수 있는 버튼 
checkbos와 radio는 선택도구 

=>name속성:서버에게 전달될 때 파라미터 이름 
name이 없으면 서버에게 전달되지 않습니다. 
submit, button, reset은 name이 필요 없습니다. 
checkbox와 radio는 name이 같아야 하나의 그룹이 됩니다. 

=>value속성 
입력도구에서는 기본 값이 됩니다. 
checkbox와 radio에서는 선택했을 때 서버에게 넘어가는 값 
버튼 들에서는 버튼에 보여지는 문자열이 됩니다. 

=>size속성: 입력도구의 크기 
=>maxlength 속성: 입력도구에서 최대 글자 수
=>file에서 accept속성: 확장자를 나열해서 확장자만 파일창에 보이도록 하는 속성 

=>html5에서는 모바일을 위해서 type이 여러가지 추가되었습니다.   

5.select
=> 콤보 박스 
=> name속성을 설정 
=> select안에는 option태그를 이용해서 항목을 설정합니다. 
option태그를 만들때는 value를 설정해서 선택했을 때 서버에게 넘어가는 값을 설정합니다. 

6. textarea 
=>여러 줄의 텍스트를 입력받을 때 사용하는 도구 
=>rows 와 cols 속성으로 행과 열 수를 설정해서 생성 

7.button 
=>버튼을 만들때 사용하는 태그 
=>여는 태그와 닫는 태그 사이에 버튼에 보여질 문자열을 설정 
=>form안에 있으면 submit의 기능을 수행 

8.input만 종료태그가 없습니다. 
자바스크립트에서 제어하기 위해서는 id를 설정하는 경우가 많습니다. 

ex)회원가입화면 만들기 
=>아이디, 비밀번호, 이메일, 성별, 이미지, 하고싶은 이야기(많은 양의 텍스트)
=>확인과 취소 및 메인으로 이동하는 버튼  

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>회원가입</title>
</head>
<body>
          <form action="register.jsp">
              <fieldset>
                  <legend>회원가입</legend>
                  
                  <label for="id">아이디</label>
                  <input type="text"  id="id"  name="id"  
                    size="20"> <br/>
                    
                  <label for="pw">비밀번호</label>
                  <input type="password"  id="pw"  name="pw"  
                    size="20"> <br/> 
                    
                  <label for="email">이메일 </label>
                  <input type="text"  id="email"  name="email" 
                  size="30"/>@
                  <select name="corp">
                      <option value="direct">직접입력</option>
                      <option value="gmail">gmail.com</option>
                      <option value="naver">naver.com</option>
                  </select> 
                  <br/>
                  
                  <label for="gender">성별</label>
                  <input type="radio"  name="gender"  
                  checked="checked"  value="man"/>남자 
                  <input type="radio"  name="gender" 
                   value="woman"/>여자 
                  <br/>
                  
                  <label for="image">이미지</label>
                  <input type="file"  name="image"  id="image" 
                  accept=".gif, .jpg, .png, .jpeg" />
                  <br/>
                  
                  <label for="story">하고 싶은 이야기</label>
                  <br/>
                  <textarea rows="10"  cols="40"  name="story"
                  id="story" ></textarea>
                  <br/>
                  
                  <input type="submit"  value="회원가입" />
                  <input type="reset"  value="작성취소"  />
                  <input type= "button"  value="메인으로" 
                   onclick="location.href='./' " />
                   
                   <select size="3"  multiple="multiple">
                          <option value="1" >1</option>
                          <option value="2" >2</option>
                          <option value="3" >3</option>
                          <option value="4" >4</option>
                          <option value="5" >5</option>
                          <option value="6" >6</option>                         
                   </select>                             
              </fieldset>
              
          </form>
</body>
</html>

9.폼 디자인 할 때 주의사항 
=>불 필요한 입력을 요구하지 않는 것이 좋습니다. 
=>레이블을 적절히 만들고 연결해서 사용자가 빠르게 입력할 수 있도록 해 주어야 합니다. 
=>연관된 입력은 그룹화(결혼 여부와 결혼 기념일) 
=>필수 입력과 선택 입력을 잘 구분해서 필수 입력을 잘 보이도록 앞에 배치하는 것이 좋습니다. 

**영역 관련 태그 
<div> : 블럭 태그 - 좌우에 다른 태그가 배치되지 않는 태그 
<span> : 인라인 태그 - 좌우에 다른 태그가 배치될 수 있는 태그 

**iframe 
=>다른 파일의 내용을 출력하기 위한 태그 
=>width, height: 너비와 크기 속성 
=>name: 링크의 target에 설정할 이름으로 id와 동일하게 설정 
=>src : 보여질 문서의 url - 외부 url은 표시가 안될 수도 있음 


**CSS(Cascading Style Sheet)
=>css는 웹페이지에 디자인이라는 시각적 가치를 부여하기 위한 언어 

1.표준은 css2.1과 3 
=>css2.1은 IE7부터 지원 
=>css3은 IE10이상부터 지원 

2.css를 적용하는 방법 
1)External Style Sheet:외부에 파일을 만들고 연결 
=>Linked Style : 연결 
=>Import Style: 내용을 가져와서 포함 

2)internal style sheet: html파일내에서 작성 

3)inline style sheet: 태그 내에 작성 

=> 가장 권장하는 것은 외부에 파일을 만들고 연결하는 것 

3.외부에 파일을 만들고 연결시키는 방법 
<link rel="stylesheet"  href="css파일 경로"> 

1)style을 저굥ㅇ할 html을 생성하고 작성 
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>스타일 시트 적용</title>
</head>
<body>
     <h1>제목</h1>
     <p>문단</p> 
     <div>블록 영역</div>
     <span>인라인 영역</span>

</body>
</html>

2)WebContent디렉토리에 css디렉토리를 생성하고 link,css파일을 추가한 후 작성 

h1{
	color:blue;
}

3)style.html파일에 link.css파일 링크 설정 

<!--  외부 스타일 시트 파일 링크 설정  -->
<link rel="stylesheet"  href="./css/link.css">

4) css디렉토리에 import.css파일을 추가한 후 작성 

p{
	color:red;
}

=>외부 스타일 시트 파일의 내용을포함시키고자 하는 경우에는 
<style type ="text/css">
@import url("파일경로")또는 @import "파일경로"
</style> 

5)style.html파일의 head태그 안에 작성 

<!--  외부 스타일 시트 파일 내용을 포함  -->
<style type="text/css">
 @import url("./css/import.css")
 </style>

=>스타일시트를 html문서내에 작성해서 적용 
=>head안에 <style>내용</style> 

6)style.html파일에 스타일시트 적용  
 
<!--  내부 스타일 시트 작성  -->
 <style>
    div{
        color: green;
    }
 </style>

=>inline style sheet:태그 안에 작성 
태그 안에 style="css코드" 

  <span style="color:magenta;">인라인 영역</span>

=> 가장 권장하는 방법은 외부에 파일을 만들고 link를 거는 것인데 유지보수를 할 때는 외부에 있는 
파일이 다른 파일을 참조 당할 수 있기 때문에 파일 안이나 태그 안에 만드는 경우도 종종 있습니다.

**스타일시트 규칙 
1.작성 
선택자{
     속성:값;
      ...
}
=>세미콜론은 하나의 속성만 있는 경우에는 생략이 가능 

2. 작성을 할 때 예약어에는 따옴표를 붙이면 안됩니다. 
red->빨강색   "red"->문자열 red

**css3에서 추가된 부분 
=> 경계선(border): 보더에 이미지 사용이 가능하고 각 코너에 서로 다른 경계선을 적용하는 것이 가능 
=> background:여러 개의 배경 설정 가능 
=> 색상: 투명하고 그라디언트 추가 
=> 텍스트: 그림자 , 오버플로우나 워드 랩 

=> 변형 가능: 크기변화, 이동, 회전, 왜곡이 가능 
=> 화면전환 효과 

**선택자(Selector) 
1.type선택자 
*: 전체 

태그이름: 태그 

.클래스이름: 클래스 

#id: id 

2.속성 선택자 
1)선택자[속성명] : 선택자 중에서 속성명을 가진 선택자에만 적용

2)선택자[속성명="값"] : 선택자 중에서 속성의 값이 값인 선택자에만 적용 
이 형태의 선택자는 input에서 많이 사용 

3.가상 선택자 
=>어떤 선택자의 상태에 따라 적용하는 선택자 
=>선택자 뒤에 :을 붙이고 추가 

1)링크에 붙이는 가상 선택자 
link: 링크가 설정된 태그 
visited: 방문한 사이트의 링크 

2)동작에 붙이는 가상 선택자 
hover:마우스가 올라오면 
active:마우스로 클릭하면 

3)input 에 사용하는 가상 선택자 
focus: 포커스가 오면 
checked: 체크가 되면 
enabled: 활성화되면 
disabled: 비활성화되면 


4. 구조와 관련된 선택 
root:최상위 선택자 
empty: 자식이 없는, 내부에 다른 태그가 없는 
only-child:동일한 레벨의 태그가 없는 
first-child:첫번째 자식인 
last-child:마지막 자식인 
nth-of-type(n): n번째에 해당하는 
first-of-type: type의 첫번째 

가상선택자 형태로 first-line, first-letter도 제공 

5. 선택자 조합 
1)하위 선택자 - 공백을 이용 
.note p : note라는 클래스 안에 있는 모든 P 태그 

2)자식 선택자 - >를 이용 
.note > p: note라는 클래스의 p라는 태그가 자식으로 존재하는 경우 

<div class="note">
    <p>1</P>
    <div><p>2</p></div>
</div>
1번의 경우는 2개의 p태그 모두에 적용 
2번의 경우는 첫번째 p태그에는 적용이 되지만 두번째 p 태그에는 적용이 안됨 

3)형제 선택 
+: 바로 뒤의 형제에만 적용 

~: 모든 형제에 적용 

h1+h2: h1바로 뒤에 나온 h2에만 적용 

h1~h2: h1과 동등한 레벨에 있는 모든 h2 

4)선택자 그룹화 
=> 여러 개의 선택자를 하나로 표현하고자 할 때는 ,로 구분


6. 선택자 우선 순위
1)태그 선택자, 가상 클래스 

2) 클래스 선택자 

3) 아이디 선택자 

4)인라인 스타일 시트   

=> 인라인이 제일 강하고 그 다음은 아이디,클래스, 태그순입니다. 

**단위
1.절대 단위: 해상도에 상관없이 크기가 고정 
=>인쇄를 할 때는 절대 단위를 사용 

pt(1/72 인치)
cm
mm
pc(12pt)

2.상대 단위 : 해상도에 따라 크기가 변하는 단위 
=>화면에 출력할 때는 상대 단위를 이용 

px(픽셀)
ex: 소문자 x의 크기 
em: font-size값을 기준으로 하는 크기 - 현재 글자 크기는 1em
%

ch: 숫자 0의 크기 
vw: 현재 화면의 가로크기의 1/100 
vh:현재화면의 세로크기의 1/100 
vm: vw 와 vh중 작은 것 선택 

각도는 deg(360도가 1회전), rad(2파이가 1회전) 

3. 예전 웹에서는 글자 크기를 지정할 때 px를 많이 사용했는데 px단위로 설정을 하게되면 
화면의 크기가 변경되는 경우 글자 크기가 일정한 크기로 적용되는 경우가 있어서 최근에는 em을 사용하는 
것을 권장 
www.pxtoem.com에서 크기 변환을 해줍니다. 

4.N-Screen:다양한 크기의 스크린 - 반응형 웹 


**타이포그라피 : 문자 
1.font-family
=>글꼴 설정을 위한 속성 
font-family:글꼴, 글꼴, 글꼴...
=>첫번째 글꼴이 있으면 그 글꼴을 지정하고 없으면 뒤에 글꼴을 지정 
=>여러 개를 지정하는 이유는 브라우저가 글꼴을 가지고 있지 않을 때를 대비 

@font-face{
      font-family:글꼴; 
      src:url("글꼴 경로") format(글꼴유형)
}

=> 글꼴이 없으면 다운로드 받아서 사용 

2.font-size: 글자 크기 
=>px, pt, em, % 등의 단위를 이용해서 설정 
=><h1~6>태그의 글자 크기는 정해져 있지만 css를 이용하면 글자 크기를 변경 

3.line-height
=> 줄 간격 
=> 단위는 font-size와 동일 

4.font-weight: 글자 굵기 
=> normal, bold로 설정 가능 
=> 100-900사이의 숫자로 가능 

5.font-style
=>글자를 기울이고자 할 때 사용 
normal과 italic 
ablique: 적용 안됨 

6.font-varient 
=>영문 소문자를 작은 크기의 대문자로 표현할 때 사용 
=>normal 또는 small-caps 

7.font
=>위의 6가지 속성을 한꺼번에 적용하기 위한 속성 
font: font-weight font-style font-varient font-size / line-height font-family;

8. direction 
=>텍스트의 쓰기 방향 설정 
=>ltr(왼쪽에서 오른쪽으로) 과 rtl(오른쪽에서 왼쪽으로) 

9.tect-indent
=>첫 줄 들여쓰기 설정 

10.text-align
=>블록 요소와 인라인 요소 모두에 적용 가능 
=>좌우 맞춤 
=>값으로는 left, right, center, justify(균등 분할) 
=>td와 인라인 요소에서는 콘텐츠의 크기보다 width가 넓은 경우에만 적용이 가능 

11.vertical-align 
=>하나의 행에 여러 개의 inline요소가 있을 때 세로 위치를 정렬하기 위해서 사용 
=>baseline, sub(아래첨자), super(윗첨자), top, middle, bottom 등 
=>이 속성이 image에서 다른 콘텐츠와 배치모드에 사용 

12.text-decoration 
=>글자에 밑줄이나 취소선 등을 그릴때 사용 
=>non, underline, overline, line-through, blink등 
=>구버전 IE에서는 적용이 안됨 

a태그에서 밑줄을 없애버리고 자 할 때 none으로 많이 적용 

13.text-overflow
=>div나 span같은 영역 태그에 텍스트를 표시할 때 출력영역을 넘어서는 텍스트를 어떻게 
할 것인지 설정 
=>clip을 설정하면 텍스트를 잘라버리고 elipse를 설정하면 나머지 내용은...으로 보입니다.
=>도서 서평이나 게시판에서 제목을 나타낼 때 주로 이용 

14.text-transform
=>영문 대소문자 설정 
=>none, uppercase, lowercase,capitalize(단어의 첫글자만 대문자로 변경)

15.letter-spacing 
=>글자 간격 

16.text-shadow
=>글자의 그림자를 설정할 수 있는 속성 
=>가로 거리 세로 거리 그림자 색상을 순서대로 대입하는 데 ,추가하고 계속해서 설정 가능 

HTML5나 CSS3의 목적은 외부 플러그인 없이 웹 애플리케이션을 만드는 것 

17.목록 설정(ul-ol태그)
 
1)list-style-position:목록에 들여쓰기 효과를 설정하는 것으로 inside와 outside

2)list-style-type:목록 모양 설정 
none, disc, circle, square, decimal, decimal-leading-zero, upper-alpha, lower-alpha, 
upper-roman, lower-roman, upper-latin, lower-latin, upper-greek, lower-greek, armenian,
georgian, hirakana, katakana 등 

3)목록에 이미지를 추가할 수 있음 
=>css3에서 추가 
=>list-style:image:url(이미지 파일 경로) 
이미지 파일의 크기조절이 안되므로 이미지를 처음부터 크기에 맞게 디자인을 해야 합니다. 


**배경과 색상 
1.color
=>글자 색상
=>색상 설정은 자주 사용하는 색상은 색상 이름을 제공 
=>#16진수6자리, rgb(10진수, 10진수, 10진수),rgb(백분율, 백분율, 백분율), hsl(색조, 채도, 명도) 

2.background-color 
=>배경색 설정 
=>색상 설정 방법은 color와 동일 
=>인라인 태그는 콘텐츠가 있는 영역만 칠해지고 블록 태그는 가로끝까지 칠해집니다. 

3.background-image
=>배경에 이미지 설정 
=>값은 url(이미지 파일 경로)의 형태로 설정 
=>background-image를 설정하고 파일이 없으면 background-color가 적용됩니다. 

4.background-repeat
=>이미지 출력 영역보다 이미지가 작을 때 반복 여부를 설정하기 위한 옵션 
=>repeat(상하좌우 반복), repeat-x(좌우로만 반복), repeat-y(상하로만 반복), no-repeat(반복안함) 

5.background-position 
=>배경이미지가 어디서 부터 출력될 것인지 설정 
=>left, right, top, bottom 의 조합으로 가능 
=>가로와 세로 위치를 직접 설정 가능 

6.background-attachment 
=>스크롤 했을때 배경이미지를 같은 자리에 위치 시킬 것인지의 여부 
=>scroll을 설정하면 스크롤에 따라 움직이고 fixed를 설정하면 이미지가 고정 

7.background 
=>한꺼번에 설정하기 위한 속성 
background:color url(이미지파일경로). repeat position attachment; 

 

 
  



















  






















